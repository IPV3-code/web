#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 100

// Function to find the vertex with the minimum key value that is not yet included in MST
int minKey(int key[], int mstSet[], int n) {
    int min = INT_MAX, minIndex;
    
    for (int v = 0; v < n; v++) {
        if (mstSet[v] == 0 && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }
    
    return minIndex;
}

// Function to implement Prim's Algorithm
void primMST(int graph[MAX_VERTICES][MAX_VERTICES], int n) {
    int parent[MAX_VERTICES];  // Array to store the MST
    int key[MAX_VERTICES];     // Key values to pick minimum weight edge
    int mstSet[MAX_VERTICES];  // To represent the set of vertices included in MST
    
    // Initialize all keys as INFINITE, mstSet[] as false, and parent[] as -1
    for (int i = 0; i < n; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
        parent[i] = -1;
    }
    
    // Always include the first vertex in the MST
    key[0] = 0;
    
    // The MST will have n vertices
    for (int count = 0; count < n - 1; count++) {
        // Pick the minimum key vertex from the set of vertices not yet processed
        int u = minKey(key, mstSet, n);
        
        // Add the picked vertex to the MST set
        mstSet[u] = 1;
        
        // Update the key and parent values of the adjacent vertices of the picked vertex
        for (int v = 0; v < n; v++) {
            // graph[u][v] is non-zero only for adjacent vertices of u
            // mstSet[v] is false for vertices not yet included in MST
            // Update key[v] only if graph[u][v] is smaller than key[v]
            if (graph[u][v] != 0 && mstSet[v] == 0 && graph[u][v] < key[v]) {
                key[v] = graph[u][v];
                parent[v] = u;
            }
        }
    }
    
    // Print the constructed MST
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++) {
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int n, m;
    int graph[MAX_VERTICES][MAX_VERTICES] = {0};  // Adjacency matrix for the graph
    
    // Read the number of vertices and edges
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &m);
    
    // Read the edges and their weights
    printf("Enter the edges and their weights (format: u v weight):\n");
    for (int i = 0; i < m; i++) {
        int u, v, weight;
        scanf("%d %d %d", &u, &v, &weight);
        graph[u][v] = weight;
        graph[v][u] = weight;  // As it's an undirected graph
    }
    
    // Call Prim's algorithm to find the MST
    primMST(graph, n);
    
    return 0;
}
